/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.localcompany.txtparser;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.ListModel;
import javax.swing.plaf.metal.MetalBorders;

/**
 *
 * @author PCTAF01
 */
public class Interface extends javax.swing.JFrame {

    public String Pwd="";
    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Parcourir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Lister");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton3.setText("Convertir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Ecrire");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Nettoyer");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String Path = jTextField1.getText();
        if(!Path.endsWith("\\") && !Path.endsWith("/")){
            Path = Path+"\\";
            jTextField1.setText(Path);
        }
        if(new File(Path).exists() && new File(Path).isDirectory()){
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jTextField1.setEditable(false);
            jTextField1.setBorder(BorderFactory.createLineBorder(Color.GRAY));
            ListingFolder();
        }
        else{
            jTextField1.setBorder(BorderFactory.createLineBorder(Color.RED));
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jTextField1.setText("");
        jTextField1.setEnabled(true);
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jList1.setModel(new DefaultListModel<>());
        jButton3.setEnabled(true);
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser FileChooser = new JFileChooser();
        FileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(FileChooser.showOpenDialog(null)==JFileChooser.APPROVE_OPTION){
            File Fichier = FileChooser.getSelectedFile();
            try {
                jTextField1.setText(Fichier.getCanonicalPath());
            } catch (IOException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jButton3.setEnabled(false);
        String Path = jTextField1.getText();
        ListModel<String> List = jList1.getModel();
        String Converted = "";
        for(int i=0;i<List.getSize()-1;i++){
            jTextArea1.append(Path+List.getElementAt(i)+"\n");
            String Content = ReadFile(Path+List.getElementAt(i));
            if(Content.length()>10){
                jTextArea1.append("Nombre de lignes : "+Content.split("\n").length+".\n");
                String[] T = ToBlock(Content);
                jTextArea1.append("Nombre de block : "+T.length+".\n");
                String Final = "";
                for(int j=0;j<T.length;j++){
                    Final = Final + RemoveShit(T[j])+"\n";
                }
                Pwd = Pwd + Final+"\n";
                jTextArea1.append("Nombre de wd : "+Final.split("\n").length+".\n");
            }
            else{
                jTextArea1.append("Nombre de lignes : 0.\n");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        System.out.println("----------------------------");
        System.out.println(Pwd.replace("\n\n", "\n").replace("\n\n\n", "\n"));
        System.out.println("----------------------------");
        try {
            BufferedWriter Bw = new BufferedWriter(new FileWriter(new File(jTextField1.getText()+"Converted.txt")));
            Bw.write(Pwd);
            Bw.close();
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTextField1.setText("");
        jTextField1.setEnabled(true);
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jList1.setModel(new DefaultListModel<>());
        jButton3.setEnabled(true);
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed
    public void ListingFolder(){
        DefaultListModel<String> List= new DefaultListModel<>();
        String[] Files = ListFolder(jTextField1.getText());
        for(int i=0;i<Files.length;i++){
            List.addElement(Files[i]);
        }
        jList1.setModel(List);
    }
    
    public String[] ListFolder(String Folder){
        int Cpt=0;
        String[] End = null;
        if(!Folder.endsWith("\\") && !Folder.endsWith("/") ){Folder = Folder+"\\";jTextField1.setText(Folder);}
        File Directory = new File(Folder);
        if(Directory.exists() && Directory.isDirectory()){
            File[] Files = Directory.listFiles();
            for(int i=0;i<Files.length;i++){
                if(Files[i].isFile() && Files[i].getName().endsWith(".txt")){
                    Cpt++;
                }
            }
            End = new String[Cpt];
            Cpt=0;
            for(int i=0;i<Files.length;i++){
                if(Files[i].isFile() && Files[i].getName().endsWith(".txt")){
                    End[Cpt]=Files[i].getName();
                    Cpt++;
                }
            }
        }
        return End;
    }
    public String ReadFile(String File){
        String Content ="";
        File F = new File(File);
        try {
            if(F.exists() && F.isFile() && F.getName().endsWith(".txt") && Files.size(Paths.get(File))>10){
                try {
                    BufferedReader Br = new BufferedReader(new FileReader(F));
                    String Line = Br.readLine();
                    while(Line!=null){
                        Content = Content+Line+"\n";
                        Line = Br.readLine();
                    }
                    Br.close();
                    if(Content.length()>1){
                        Content = Content.substring(0,Content.length()-1);
                    }
                } catch (FileNotFoundException ex) {
                } catch (IOException ex) {
                }
            }
        } catch (IOException ex) {
        }
        return Content;
    }
    public String Convert(String Original){
        String Final = "";
        String[] Blocks = ToBlock(Original);
        for(int i=0;i<Blocks.length;i++){
            Final = Final + RemoveShit(Blocks[i])+"\n";
        }
        if(Final.endsWith("\n")){
            Final = Final.substring(0,Final.length()-1);
        }
        return Final;
    }
    public String[] ToBlock(String Original){
        String[] Block = null;
        String[] BlockTemp = Original.split(" = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =");
        int J = 0;
        for(int i=0;i<BlockTemp.length;i++){
            if(BlockTemp[i].split("\n").length>2){
                J++;
            }
        }
        Block = new String[J];
        J = 0;
        for(int i=0;i<BlockTemp.length;i++){
            if(BlockTemp[i].split("\n").length>2){
                Block[J] = BlockTemp[i];
                J++;
            }
        }
        return Block;
    }
    public String RemoveShit(String Block){
        String Final = "";
        String Url="";
        String Username="";
        String Password="";
        Block = Block.replace(String.valueOf((char)0), "");
        String[] Lines = Block.split("\n");
        for(int i=0;i<Lines.length;i++){
            String[] Parts = Lines[i].split(":");
            if(Parts.length>1){
                if(Parts[0].replace(" ", "").toLowerCase().contains("url")){
                    if(Parts[1].toLowerCase().contains("http")){
                        Url=Parts[1];
                        if(Parts.length>2){
                            if(Parts[2].substring(2).contains("/")){
                                int w = Parts[2].substring(2).indexOf("/");
                                Parts[2] = Parts[2].substring(0,w+2);
                            }
                            Url=Parts[1]+":"+Parts[2];
                        }
                    }
                    if(Parts[1].toLowerCase().contains("android")){
                        Url=Parts[1];
                        if(Parts.length>2){
                            if(Parts[2].contains("==@")){
                                int w = Parts[2].indexOf("==@");
                                Parts[2] = Parts[2].substring(w+"==@".length());
                            }

                            Url=Parts[1]+":"+Parts[2];
                        }
                    }
                }
                if(Parts[0].toLowerCase().contains("ssid")){
                    Url="WIFI";
                    Username=Parts[1];
                }
                if(Parts[0].toLowerCase().replace(" ", "").equals("username")){
                    Username=Parts[1];
                }
                if(Parts[0].toLowerCase().replace(" ", "").equals("username")){
                    Username=Parts[1];
                }
                if(Parts[0].toLowerCase().replace(" ", "").equals("password")){
                    Password=Parts[1];
                }
                if(Parts[0].toLowerCase().replace(" ", "").equals("key(ascii)")){
                    Password=Parts[1];
                }
            }
        }
        if(Url.startsWith(" ")){Url=Url.substring(1);}
        if(Username.startsWith(" ")){Username=Username.substring(1);}
        if(Password.startsWith(" ")){Password=Password.substring(1);}
        if(Password.length()>2){
            Final = Final+FindType(Url)+";"+Url+";"+Username+";"+Password+"\n";
        }
        if(Final.startsWith("\n")){Final = Final.substring(1);}
        if(Final.endsWith("\n")){Final = Final.substring(0,Final.length()-1);}
        return Final;
    }
    public String FindType(String Url){
        String Type = "AUTRE";
        if(Url=="WIFI"){Type="WIFI";}
        if(Url.contains("leboncoin.fr")){Type="MAGASIN";}
        if(Url.contains("intersport.fr")){Type="DATA";}
        if(Url.contains("edf.fr")){Type="DATA";}
        return Type;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
